/*
Given an unsorted array A of size N that contains only non-negative integers, find a continuous sub-array which adds to a given number S.

In case of multiple subarrays, return the subarray which comes first on moving from left to right.
*/

//{ Driver Code Starts
import java.util.*;
import java.lang.*;
import java.io.*;

class Main{
	public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);

        int t = sc.nextInt();

        for (int i = 0; i < t; i++) {
            int n = sc.nextInt();
            int s = sc.nextInt();

            int[] m = new int[n];
            for (int j = 0; j < n; j++) {
                m[j] = sc.nextInt();
            }
            
            Solution obj = new Solution();
            ArrayList<Integer> res = obj.subarraySum(m, n, s);
            for(int ii = 0;ii<res.size();ii++)
                System.out.print(res.get(ii) + " ");
            System.out.println();
        }
    }

}
// } Driver Code Ends


class Solution
{
    //Function to find a continuous sub-array which adds up to a given number.
    static ArrayList<Integer> subarraySum(int[] arr, int n, int s) 
    {
        // Your code here
        int l=0;
        int r=0;
        int sum=arr[0];
        
        ArrayList<Integer> res=new ArrayList<Integer>();
        
        for(int i=1;i<n;i++)
        {
            if(sum<s)
            {
                r++;
                sum+=arr[r];
            }
            else if(sum>s)
            {
                sum-=arr[i];
                i++;
            }
            else
            {
                res.add(l+1);
                res.add(r+1);
                break;
            }
        }
        
        if(res.size()==0)
        {
            res.add(-1);
        }
        return res;
    }
}
